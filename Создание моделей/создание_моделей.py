# -*- coding: utf-8 -*-
"""Создание моделей.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WtPTDpGyc3icc_5bJy8TkdC9M59jRRSe

#Подключение библиотек
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np 
import pandas as pd 
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
from tqdm import tqdm
from sklearn.model_selection import train_test_split
import tensorflow as tf
from keras.models import Sequential
from keras.layers.recurrent import LSTM, GRU,SimpleRNN
from keras.layers.core import Dense, Activation, Dropout
from keras.layers.embeddings import Embedding
from keras.layers.normalization import BatchNormalization
from keras.utils import np_utils
from sklearn import preprocessing, decomposition, model_selection, metrics, pipeline
from keras.layers import GlobalMaxPooling1D, Conv1D, MaxPooling1D, Flatten, Bidirectional, SpatialDropout1D, Input
from keras.preprocessing import sequence, text
from keras.callbacks import EarlyStopping
import random

import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline
from plotly import graph_objs as go
import plotly.express as px
import plotly.figure_factory as ff

"""#Далее надо будет заменить данные для обученния"""

train = pd.read_csv('./train.csv') 
test = pd.read_csv('./test.csv', encoding = 'latin1')

train.head()

train.shape

label = train['label'].unique()
label

train['review'].apply(lambda x:len(str(x).split())).max()

label = train['label'].unique()
label

y=train['label'].values
y = pd.get_dummies(y)
print('Shape of label tensor:', y)

tmp = train['review'] + test['review']
tmp = tmp.astype(str)
tokenizer = text.Tokenizer(num_words=400000,
    filters='!"#$%&()*+,-./:;<=>?@[\\]^_`{|}~\t\n',
    lower=True,
    split=" ")
max_len = 70
tokenizer.fit_on_texts(tmp)
word_index = tokenizer.word_index
len(word_index)

X = train['review'].values
X = tokenizer.texts_to_sequences(X)
X = sequence.pad_sequences(X, maxlen=max_len)
print('Shape of data tensor:', X.shape)

x_train, x_test, y_train, y_test = train_test_split(X, y, 
                                                  random_state=46, 
                                                  test_size=0.3, shuffle=True)

print('x_train.shape: ' + str(x_train.shape),' y_train.shape: '+str(y_train.shape))
print('x_test.shape: ' + str(x_test.shape),' y_train.shape: '+str(y_test.shape))

"""#Embending"""

embeddings_index = {}
f = open('/content/drive/MyDrive/4/glove.840B.300d.txt','r',encoding='utf-8')
for line in tqdm(f):
    values = line.split(' ')
    word = values[0]
    coefs = np.asarray([float(val) for val in values[1:]])
    embeddings_index[word] = coefs
f.close()

print('Found %s word vectors.' % len(embeddings_index))

embedding_matrix = np.zeros((len(word_index) + 1, 300))
for word, i in tqdm(word_index.items()):
    embedding_vector = embeddings_index.get(word)
    if embedding_vector is not None:
        embedding_matrix[i] = embedding_vector

"""#Simple RNN """

model=tf.keras.Sequential([
  tf.keras.layers.InputLayer(input_shape=x_train.shape[1]),
  tf.keras.layers.Embedding(len(tokenizer.word_index)+1,32),
  tf.keras.layers.SimpleRNN(100),
  tf.keras.layers.Dense(4, activation='softmax')])
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy','categorical_accuracy','AUC','Precision','Recall'])    
model.summary()

modelResults = model.fit(x_train, y_train, epochs=5, batch_size=64,validation_split=0.1)

SimpleRNNModel = Sequential()

SimpleRNNModel.add(Input(shape=x_train.shape[1]))
SimpleRNNModel.add(Embedding(len(tokenizer.word_index)+1,32))
SimpleRNNModel.add(SimpleRNN(100))
SimpleRNNModel.add(Dense(4, activation='softmax'))
#SimpleRNNModel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
SimpleRNNModel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy','categorical_accuracy','AUC','Precision','Recall', tf.keras.metrics.PrecisionAtRecall(recall=0.8)])    
SimpleRNNModel.summary()

SimpleRNNModelResults = SimpleRNNModel.fit(x_train, y_train, epochs=5, batch_size=64,validation_split=0.1)

"""# LSTM (Long Short Term Memory) Networks"""

SimpleLSTMModel = Sequential()
SimpleLSTMModel.add(Input(shape=x_train.shape[1]))
SimpleLSTMModel.add(Embedding(len(tokenizer.word_index)+1,32))
SimpleLSTMModel.add(LSTM(100))
SimpleLSTMModel.add(Dense(4, activation='softmax'))
SimpleLSTMModel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy', 'Precision','Recall', tf.keras.metrics.PrecisionAtRecall(recall=0.8)])
    
SimpleLSTMModel.summary()

SimpleLSTMModelResults = SimpleLSTMModel.fit(x_train, y_train, epochs=5, batch_size=64,validation_split=0.1)

"""#GRU Gated Recurrent Units"""

SimpleGRUModel = Sequential()
SimpleGRUModel.add(Input(shape=x_train.shape[1]))
SimpleGRUModel.add(Embedding(len(tokenizer.word_index)+1,32))
SimpleGRUModel.add(GRU(100))
SimpleGRUModel.add(Dense(4, activation='softmax'))
SimpleGRUModel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy', 'Precision','Recall', tf.keras.metrics.PrecisionAtRecall(recall=0.8)])
    
SimpleGRUModel.summary()

SimpleGRUModelResults = SimpleGRUModel.fit(x_train, y_train, epochs=5, batch_size=64,validation_split=0.1)

"""# Bidirectional LSTM Model

"""

BILSTMModel = Sequential()
BILSTMModel.add(Input(shape=x_train.shape[1]))
BILSTMModel.add(Embedding(len(tokenizer.word_index)+1,32))
BILSTMModel.add(Bidirectional(LSTM(100, return_sequences=True)))
BILSTMModel.add(GlobalMaxPooling1D())
BILSTMModel.add(Dense(4, activation='softmax'))
BILSTMModel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy','Precision','Recall', tf.keras.metrics.PrecisionAtRecall(recall=0.8)])
    
BILSTMModel.summary()

BILSTMModelResults = BILSTMModel.fit(x_train, y_train, epochs=5, batch_size=64,validation_split=0.1)

"""# Hyperparameter Tuning/ Fine Tuning"""

BILSTMModel_2 = Sequential()
BILSTMModel_2.add(Input(shape=x_train.shape[1]))
BILSTMModel_2.add(Embedding(24887,300, weights=[embedding_matrix]))
BILSTMModel_2.add(Bidirectional(LSTM(50, return_sequences=True, dropout=0.1, recurrent_dropout=0.1)))
BILSTMModel_2.add(GlobalMaxPooling1D())
BILSTMModel_2.add(Dense(50, activation='relu'))
BILSTMModel_2.add(Dropout(0.2))
BILSTMModel_2.add(Dense(4, activation='softmax'))
BILSTMModel_2.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy','Precision','Recall', tf.keras.metrics.PrecisionAtRecall(recall=0.8)])
    
BILSTMModel_2.summary()

BILSTMModel_2Results = BILSTMModel_2.fit(x_train, y_train, epochs=5, batch_size=64,validation_split=0.1)

"""# Сохранение моделей"""

SimpleRNNModel.save("/content/drive/MyDrive/4/Модели/SimpleRNNModel.h5")
SimpleLSTMModel.save("/content/drive/MyDrive/4/Модели/SimpleLSTMModel.h5")
SimpleGRUModel.save("/content/drive/MyDrive/4/Модели/SimpleGRUModel.h5")
BILSTMModel.save("/content/drive/MyDrive/4/Модели/BILSTMModel.h5")
BILSTMModel_2.save("/content/drive/MyDrive/4/Модели/BILSTMModel_2.h5")

print(type(train['review'].values[1]))

R = "I am sad"
R = tokenizer.texts_to_sequences(R)
R = sequence.pad_sequences(X, maxlen=max_len)

print('Shape of data tensor:', X.shape)

BILSTMModel_2.predict(R)

print(np.argmax(BILSTMModel_2.predict(R), axis=-1))

label = train['label'].unique()
prediction = model.predict(R)
pred_name = label[np.argmax(prediction)]
print(pred_name)
#model.predict(R)

np.argmax(model.predict(R), axis=-1)

(model.predict(R) > 0.5).astype("int32")